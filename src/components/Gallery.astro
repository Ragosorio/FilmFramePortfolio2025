---
import { Image } from "astro:assets";
import ArrowDown from "@/assets/videos/downrow2.gif";
---

<div class="container font-Seasons">
  <section class="steps">
    <div class="step-counter">
      <div class="counter-title">
        <h1>Gallery</h1>
      </div>
      <div class="count">
        <div class="count-container">
          <h1>Video 1</h1>
          <h1>Video 2</h1>
          <h1>Video 3</h1>
          <h1>Video 4</h1>
          <h1>Video 5</h1>
        </div>
      </div>
    </div>

    <div class="cards">
      <div class="card">
        <div class="card-img">
          <img src="https://picsum.photos/800/450?random=1" alt="Video 1" />
        </div>
        <div class="card-content">
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus
            eveniet harum ipsum cupiditate quas laborum similique iure veritatis
            illo odit rerum.
          </p>
        </div>
      </div>

      <div class="card">
        <div class="card-img">
          <img src="https://picsum.photos/800/450?random=2" alt="Video 2" />
        </div>
        <div class="card-content">
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus
            eveniet harum ipsum cupiditate quas laborum similique iure veritatis
            illo odit rerum.
          </p>
        </div>
      </div>

      <div class="card">
        <div class="card-img">
          <img src="https://picsum.photos/800/450?random=3" alt="Video 3" />
        </div>
        <div class="card-content">
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus
            eveniet harum ipsum cupiditate quas laborum similique iure veritatis
            illo odit rerum.
          </p>
        </div>
      </div>

      <div class="card">
        <div class="card-img">
          <img src="https://picsum.photos/800/450?random=4" alt="Video 4" />
        </div>
        <div class="card-content">
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus
            eveniet harum ipsum cupiditate quas laborum similique iure veritatis
            illo odit rerum.
          </p>
        </div>
      </div>

      <div class="card">
        <div class="card-img">
          <img src="https://picsum.photos/800/450?random=5" alt="Video 5" />
        </div>
        <div class="card-content">
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus
            eveniet harum ipsum cupiditate quas laborum similique iure veritatis
            illo odit rerum.
          </p>
        </div>
      </div>
      <div class="card empty"></div>
      <div class="card empty"></div>
    </div>
    <div
      class="size-16 absolute bottom-5 md:bottom-0 left-1/2 -translate-x-1/2"
    >
      <Image src={ArrowDown} alt="Arrow Down" class="" />
    </div>
  </section>
</div>

<style>
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  section.steps {
    position: relative;
    width: 100vw;
    height: 100dvh;
    overflow: hidden;
  }

  .cards {
    position: absolute;
    top: 25%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 150vw;
    height: 600px;
    will-change: transform;
  }

  .card {
    position: absolute;
    width: 600px;
    height: 450px;
    top: 60%;
    left: 50%;
    transform-origin: center center;
    margin-left: -300px;
    display: flex;
    flex-direction: column;
    gap: 1em;
    will-change: transform;
  }

  .card-img {
    flex: 1;
    border-radius: 0.5em;
    overflow: hidden;
    aspect-ratio: 16/9;
  }

  .card-content {
    width: 100%;
    height: 60px;
  }

  .card-content p {
    text-align: left;
    font-size: 16px;
    font-weight: 500;
    line-height: 1.25;
    color: #111;
  }

  .step-counter {
    position: absolute;
    display: flex;
    flex-direction: column;
    margin: 2em;
  }

  .counter-title,
  .count {
    position: relative;
    width: 1200px;
    height: 150px;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    overflow: hidden;
  }

  .count {
    top: -10px;
  }

  .count-container {
    position: relative;
    transform: translateY(150px);
    will-change: transform;
  }

  .step-counter h1 {
    width: 100%;
    position: relative;
    color: #111;
    text-transform: uppercase;
    font-weight: 900;
    font-size: 150px;
    line-height: 1;
    letter-spacing: -0.04em;
    will-change: transform;
  }

  .empty {
    opacity: 0;
  }

  @media (max-width: 900px) {
    .counter-title h1 {
      font-size: 60px;
    }

    .cards {
      top: 30%;
      left: 76%;
    }

    .card {
      width: 375px;
      height: 280px;
    }

    .card-img {
      aspect-ratio: 16/9;
    }

    .count {
      top: -100px;
      left: -10px;
      height: 100px;
    }

    .count-container h1 {
      height: 100px;
      line-height: 100px;
      font-size: 100px;
    }
  }

  @media (max-width: 450px) {
    .count-container h1 {
      font-size: 85px;
    }
  }
</style>

<script
  is:inline
  src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/gsap.min.js"></script>
<script
  is:inline
  src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/ScrollTrigger.min.js"
></script>
<script
  is:inline
  src="https://cdn.jsdelivr.net/npm/lenis@1.3.8/dist/lenis.min.js"></script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    gsap.registerPlugin(ScrollTrigger);

    // Solo la configuración mínima necesaria
    ScrollTrigger.config({
      ignoreMobileResize: true,
    });

    const lenis = new Lenis();
    lenis.on("scroll", ScrollTrigger.update);
    gsap.ticker.add((time) => {
      lenis.raf(time * 1000);
    });

    gsap.ticker.lagSmoothing(0);

    const stickySection = document.querySelector(".steps");
    const cards = document.querySelectorAll(".card:not(.empty)");
    const countContainer = document.querySelector(".count-container");
    const totalCards = cards.length;

    const stickyHeight = window.innerHeight * 2;
    const getRadius = () => {
      return window.innerWidth < 900
        ? window.innerWidth * 7.5
        : window.innerWidth * 2.5;
    };

    const arcAngle = Math.PI * 0.4;
    const startAngle = Math.PI / 2 - arcAngle / 2;

    let currentCardIndex = 0;

    ScrollTrigger.create({
      trigger: stickySection,
      start: "top top",
      end: `+=${stickyHeight}px`,
      pin: true,
      pinSpacing: true,
      onUpdate: (self) => {
        positionCards(self.progress);
        updateCounter(self.progress);
      },
    });

    function positionCards(progress) {
      const radius = getRadius();
      const totalTravel = 1 + totalCards / 7.5;
      const adjustProgress = (progress * totalTravel - 1) * 0.75;

      cards.forEach((card, i) => {
        const normalizedProgress = (totalCards - 1 - i) / totalCards;
        const cardProgress = normalizedProgress + adjustProgress;
        const angle = startAngle + arcAngle * cardProgress;

        const x = Math.cos(angle) * radius;
        const y = Math.sin(angle) * radius;
        const rotation = (angle - Math.PI / 2) * (180 / Math.PI);

        gsap.set(card, {
          x: x,
          y: -y + radius,
          rotation: -rotation,
          transformOrigin: "center center",
        });
      });
    }

    function updateCounter(progress) {
      const radius = getRadius();
      const totalTravel = 1 + totalCards / 7.5;
      const adjustProgress = (progress * totalTravel - 1) * 0.75;

      let minDiff = Infinity;
      let bestIndex = 0;

      cards.forEach((card, i) => {
        const normalizedProgress = (totalCards - 1 - i) / totalCards;
        const cardProgress = normalizedProgress + adjustProgress;
        const angle = startAngle + arcAngle * cardProgress;
        const diff = Math.abs(angle - Math.PI / 2);

        if (diff < minDiff) {
          minDiff = diff;
          bestIndex = i;
        }
      });

      if (bestIndex !== currentCardIndex) {
        currentCardIndex = bestIndex;

        const slotHeight = window.innerWidth < 900 ? 100 : 150;
        const targetY = -currentCardIndex * slotHeight;

        gsap.to(countContainer, {
          y: targetY,
          duration: 0.3,
          ease: "power1.out",
          overwrite: true,
        });
      }
    }

    positionCards(0);
    gsap.set(countContainer, { y: 0 });
    updateCounter(0);

    // Fix mínimo para Chrome móvil - SOLO esto
    let resizeTimeout;
    let lastHeight = window.innerHeight;

    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);

      const currentHeight = window.innerHeight;
      const heightDiff = Math.abs(currentHeight - lastHeight);

      // Ignorar cambios pequeños (barra de Chrome)
      if (heightDiff < 120) {
        return;
      }

      resizeTimeout = setTimeout(() => {
        ScrollTrigger.refresh();
        positionCards(0);
        lastHeight = currentHeight;
      }, 200);
    });
  });
</script>
